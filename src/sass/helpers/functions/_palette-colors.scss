/**
 * Retrieves the 'lighest' color from a palette generated with @palette
 * 
 * @param  {Map} $palette - Map of colors with associated names
 *
 *
 * @example scss
 * .el {
 *    color: lightest($green-palette);
 * }
 *
 * 
 * @return {String} - single color matching the given keyword
 */
@function lightest($palette) {
  @if not map-has-key($palette, 'lightest') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `lightest`.";
  }
 
  @return map-get($palette, 'lightest');
}


/**
 * Retrieves the 'lighter' color from a palette generated with @palette
 * 
 * @param  {Map} $palette - Map of colors with associated names
 *
 *
 * @example scss
 * .el {
 *    color: lighter($green-palette);
 * }
 *
 * 
 * @return {String} - single color matching the given keyword
 */
@function lighter($palette) {
  @if not map-has-key($palette, 'lighter') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `lighter`.";
  }
 
  @return map-get($palette, 'lighter');
}
 


/**
 * Retrieves the 'light' color from a palette generated with @palette
 * 
 * @param  {Map} $palette - Map of colors with associated names
 *
 *
 * @example scss
 * .el {
 *    color: light($green-palette);
 * }
 *
 * 
 * @return {String} - single color matching the given keyword
 */
@function light($palette) {
  @if not map-has-key($palette, 'light') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `light`.";
  }
 
  @return map-get($palette, 'light');
}



/**
 * Retrieves the 'base' color from a palette generated with @palette
 * 
 * @param  {Map} $palette - Map of colors with associated names
 *
 *
 * @example scss
 * .el {
 *    color: base($green-palette);
 * }
 *
 * 
 * @return {String} - single color matching the given keyword
 */
@function base($palette) {
  @if not map-has-key($palette, 'base') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `base`.";
  }
 
  @return map-get($palette, 'base');
}


/**
 * Retrieves the 'dark' color from a palette generated with @palette
 * 
 * @param  {Map} $palette - Map of colors with associated names
 *
 *
 * @example scss
 * .el {
 *    color: dark($green-palette);
 * }
 *
 * 
 * @return {String} - single color matching the given keyword
 */
@function dark($palette) {
  @if not map-has-key($palette, 'dark') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `dark`.";
  }
 
  @return map-get($palette, 'dark');
}
 


 /**
 * Retrieves the 'darker' color from a palette generated with @palette
 * 
 * @param  {Map} $palette - Map of colors with associated names
 *
 *
 * @example scss
 * .el {
 *    color: darker($green-palette);
 * }
 *
 * 
 * @return {String} - single color matching the given keyword
 */
@function darker($palette) {
  @if not map-has-key($palette, 'darker') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `darker`.";
  }
 
  @return map-get($palette, 'darker');
}


/**
 * Retrieves the 'darkest' color from a palette generated with @palette
 * 
 * @param  {Map} $palette - Map of colors with associated names
 *
 *
 * @example scss
 * .el {
 *    color: darkest($green-palette);
 * }
 *
 * 
 * @return {String} - single color matching the given keyword
 */
@function darkest($palette) {
  @if not map-has-key($palette, 'darkest') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `darkest`.";
  }
 
  @return map-get($palette, 'darkest');
}